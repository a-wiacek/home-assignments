{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintLatte where

-- pretty-printer generated by the BNF converter

import AbsLatte
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print (Program a) where
  prt i e = case e of
    Program _ topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print (TopDef a) where
  prt i e = case e of
    TopFunDef _ fundef -> prPrec i 0 (concatD [prt 0 fundef])
    BaseClassDef _ id classmembers -> prPrec i 0 (concatD [doc (showString "class"), prt 0 id, doc (showString "{"), prt 0 classmembers, doc (showString "}")])
    ExtClassDef _ id1 id2 classmembers -> prPrec i 0 (concatD [doc (showString "class"), prt 0 id1, doc (showString "extends"), prt 0 id2, doc (showString "{"), prt 0 classmembers, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (FunDef a) where
  prt i e = case e of
    FunDef _ type_ id args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])

instance Print (Arg a) where
  prt i e = case e of
    Arg _ type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (ClassMember a) where
  prt i e = case e of
    ClassFieldDef _ type_ ids -> prPrec i 0 (concatD [prt 0 type_, prt 0 ids, doc (showString ";")])
    ClassMethodDef _ fundef -> prPrec i 0 (concatD [prt 0 fundef])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Type a) where
  prt i e = case e of
    IntType _ -> prPrec i 0 (concatD [doc (showString "int")])
    StringType _ -> prPrec i 0 (concatD [doc (showString "string")])
    BoolType _ -> prPrec i 0 (concatD [doc (showString "boolean")])
    VoidType _ -> prPrec i 0 (concatD [doc (showString "void")])
    ClassType _ id -> prPrec i 0 (concatD [prt 0 id])
    ArrayType _ type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "[]")])

instance Print (Block a) where
  prt i e = case e of
    StmtBlock _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print (Stmt a) where
  prt i e = case e of
    SEmpty _ -> prPrec i 0 (concatD [doc (showString ";")])
    SBlock _ block -> prPrec i 0 (concatD [prt 0 block])
    SDecl _ decl -> prPrec i 0 (concatD [prt 0 decl])
    SAssign _ lval exp -> prPrec i 0 (concatD [prt 0 lval, doc (showString "="), prt 0 exp, doc (showString ";")])
    SIncr _ lval -> prPrec i 0 (concatD [prt 0 lval, doc (showString "++"), doc (showString ";")])
    SDecr _ lval -> prPrec i 0 (concatD [prt 0 lval, doc (showString "--"), doc (showString ";")])
    SRet _ exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    SRetVoid _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    SIf _ exp stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmt])
    SIfte _ exp stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    SWhile _ exp stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmt])
    SFor _ type_ id exp stmt -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 type_, prt 0 id, doc (showString ":"), prt 0 exp, doc (showString ")"), prt 0 stmt])
    SExp _ exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Decl a) where
  prt i e = case e of
    VarDecl _ type_ declitems -> prPrec i 0 (concatD [prt 0 type_, prt 0 declitems, doc (showString ";")])

instance Print (DeclItem a) where
  prt i e = case e of
    DeclNoInit _ id -> prPrec i 0 (concatD [prt 0 id])
    DeclWithInit _ id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (LVal a) where
  prt i e = case e of
    LValSelf _ -> prPrec i 0 (concatD [doc (showString "self")])
    LValVar _ id -> prPrec i 0 (concatD [prt 0 id])
    LValAttr _ lval id -> prPrec i 0 (concatD [prt 0 lval, doc (showString "."), prt 0 id])
    LValCall _ call -> prPrec i 0 (concatD [prt 0 call])
    LValMethod _ lval call -> prPrec i 0 (concatD [prt 0 lval, doc (showString "."), prt 0 call])
    LValArrAccess _ lval exp -> prPrec i 0 (concatD [prt 0 lval, doc (showString "["), prt 0 exp, doc (showString "]")])

instance Print (Call a) where
  prt i e = case e of
    FunCall _ id exps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])

instance Print (Exp a) where
  prt i e = case e of
    ENullObj _ id -> prPrec i 6 (concatD [doc (showString "("), prt 0 id, doc (showString ")null")])
    ELVal _ lval -> prPrec i 6 (concatD [prt 0 lval])
    ENewObj _ id -> prPrec i 6 (concatD [doc (showString "new"), prt 0 id])
    ENewArr _ type_ exp -> prPrec i 6 (concatD [doc (showString "new"), prt 0 type_, doc (showString "["), prt 0 exp, doc (showString "]")])
    EConstant _ constant -> prPrec i 6 (concatD [prt 0 constant])
    ENegate _ opunary exp -> prPrec i 5 (concatD [prt 0 opunary, prt 6 exp])
    EMod _ exp1 opmul exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 opmul, prt 5 exp2])
    EAdd _ exp1 opadd exp2 -> prPrec i 3 (concatD [prt 3 exp1, prt 0 opadd, prt 4 exp2])
    EComp _ exp1 opcomp exp2 -> prPrec i 2 (concatD [prt 2 exp1, prt 0 opcomp, prt 3 exp2])
    EAnd _ exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, doc (showString "&&"), prt 1 exp2])
    EOr _ exp1 exp2 -> prPrec i 0 (concatD [prt 1 exp1, doc (showString "||"), prt 0 exp2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Constant a) where
  prt i e = case e of
    CInteger _ n -> prPrec i 0 (concatD [prt 0 n])
    CString _ str -> prPrec i 0 (concatD [prt 0 str])
    CTrue _ -> prPrec i 0 (concatD [doc (showString "true")])
    CFalse _ -> prPrec i 0 (concatD [doc (showString "false")])

instance Print (OpUnary a) where
  prt i e = case e of
    OpNegate _ -> prPrec i 0 (concatD [doc (showString "-")])
    OpNot _ -> prPrec i 0 (concatD [doc (showString "!")])

instance Print (OpMul a) where
  prt i e = case e of
    OpTimes _ -> prPrec i 0 (concatD [doc (showString "*")])
    OpDiv _ -> prPrec i 0 (concatD [doc (showString "/")])
    OpMod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (OpAdd a) where
  prt i e = case e of
    OpPlus _ -> prPrec i 0 (concatD [doc (showString "+")])
    OpMinus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (OpComp a) where
  prt i e = case e of
    OpLt _ -> prPrec i 0 (concatD [doc (showString "<")])
    OpLeq _ -> prPrec i 0 (concatD [doc (showString "<=")])
    OpGt _ -> prPrec i 0 (concatD [doc (showString ">")])
    OpGeq _ -> prPrec i 0 (concatD [doc (showString ">=")])
    OpEqual _ -> prPrec i 0 (concatD [doc (showString "==")])
    OpNeq _ -> prPrec i 0 (concatD [doc (showString "!=")])


