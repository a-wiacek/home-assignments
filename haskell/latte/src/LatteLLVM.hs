-- Modification of template generated by BNF Converter
import System.IO(stdin, hGetContents, hPutStrLn, stderr)
import System.Environment(getArgs)
import System.Exit
import System.FilePath
import System.Process
import Text.Printf

import LexLatte
import ParLatte
import SkelLatte
import PrintLatte
import AbsLatte
import ErrM

import Backend.LLVMData(LlvmProgram)
import LatteCompiler(translateProgram)

type ParseFun a = [Token] -> Err a

printErr :: String -> IO ()
printErr err = hPutStrLn stderr "ERROR" >> hPutStrLn stderr err >> exitFailure

run :: ParseFun (Program Pos) -> FilePath -> IO ()
run parser filePath = do
    fileContent <- readFile filePath
    case parser (myLexer fileContent) of
        Bad err -> printErr err
        Ok tree -> case translateProgram tree of
            Left err -> printErr err
            Right llvmCode -> produceBitCode filePath llvmCode

runtimeLibPath = "lib" </> "runtime.bc" :: FilePath

llvmShellCommands :: FilePath -> (CreateProcess, CreateProcess, CreateProcess)
llvmShellCommands f =
    ( shell $ printf "llvm-as -o %s %s" tempBCPath llPath
    , shell $ printf "llvm-link -o %s %s %s" bcPath tempBCPath runtimeLibPath
    , shell $ printf "rm -f %s" tempBCPath )
    where tempBCPath = takeDirectory f </> (takeBaseName f ++ "_temp.bc")
          llPath = f -<.> "ll"
          bcPath = f -<.> "bc"

produceBitCode :: FilePath -> LlvmProgram -> IO ()
produceBitCode filePath llvmCode = do
    writeFile (filePath -<.> "ll") (show llvmCode)
    let (llvmas, llvmlink, cleanup) = llvmShellCommands filePath
    (_, _, _, shellH) <- createProcess llvmas
    exitCode <- waitForProcess shellH
    if exitCode == ExitSuccess
        then do (_, _, _, shellH) <- createProcess llvmlink
                exitCode <- waitForProcess shellH
                if exitCode == ExitSuccess
                    then createProcess cleanup >> hPutStrLn stderr "OK"
                      >> printf "Generated: %s\n" (filePath -<.> "bc")
                    else printErr "Failed to link created bitcode with runtime library"
        else printErr "Failed to translate LLVM code to bitcode"

main :: IO ()
main = getArgs >>= mapM_ (run pProgram)